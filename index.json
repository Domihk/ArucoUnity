{
  "manual/create-markers.html": {
    "href": "manual/create-markers.html",
    "title": "Create Markers | Aruco Unity documentation",
    "keywords": "Create Markers Motivation Before tracking markers with your camera, you need to create, print and place them in the environment. You can use four type of Aruco objects: markers , grid boards , charuco boards and diamond markers . From left to right: a marker, a diamond marker, a grid board, a charuco board. CreateMarkers scene Open the Assets/ArucoUnity/Scenes/CreateMarkers.unity scene to visualize the Aruco objects. Play this scene to create them. You can find the created images in Assets/ArucoUnity/Images/ . Manual creation Marker Manual creation and configuration of a marker. Create an empty object. Add a ArucoMarker script. Configure it: Select a dictionary of markers. It determines the marker size (for example 4x4 bits) and had a size (for example 50 markers). A lower dictionary size is better to avoid detection errors. For more details, see \"Markers and Dictionaries\" and \"Selection a dictionary\" sections of this tutorial . Set MarkerSideLength in pixels. It controls the image size. Set MarkerBorderBits with a minimum of 1. It controls the width of the black border of the marker, helping its detection. Set MarkerId , from 0 to the dictionary size. Add a ArucoObjectCreator script. Configure it: Add the ArucoMarker script to the ArucoObject field. Check DisplayInPlayMode if you want to display the marker in play mode. Check SaveImage to save the marker in an image file in play mode. Set the OutputFolder path to save the image, relative to the persistentDataPath in builds or to the \"Assets\" folder of your project in the editor. Check AutomaticFilename for an automatic image filename based on the ArucoObject property values. Set the image filename in OptionalImageFilename if AutomaticFilename is not checked. Play the scene. The marker is automatically created on a child plane of our object and saved on the project folder. Grid board Example of a grid board with the corresponding configuration. The process is the same as in the marker subsection. The additional configurable parameters are: MarkersNumberX : The number of markers on the board X axis. MarkersNumberY : The number of markers on the board Y axis. MarkerSeparation : The margin between markers in pixels. Charuco board Example of a charuco board with the corresponding configuration. The process is the same as in the marker subsection. The additional configurable parameters are: MarginLength : The markers margin on the white squares. SquaresNumberX : The number of squares on the board X axis. SquaresNumberY : The number of squares on the board Y axis. SquareSideLength : The width in pixels of each square. Diamond marker Example of a diamond marker with the corresponding configuration. The process is the same as in the marker subsection. The additional configurable parameters are: SquareSideLength : The width in pixels of each square. MarkersXId : The ids of the four markers."
  },
  "manual/build-from-sources.html": {
    "href": "manual/build-from-sources.html",
    "title": "Build From Sources | Aruco Unity documentation",
    "keywords": "Build From Sources Preparation We clone two repository: ArucoUnity which contains the Unity project with C# scripts, and ArucoUnityPlugin which contains the C interface on the OpenCV modules. Run the following commands: git clone https://github.com/NormandErwan/ArucoUnity git clone https://github.com/NormandErwan/ArucoUnityPlugin mkdir -p ArucoUnityPlugin/build/opencv/ Build OpenCV We need a build of OpenCV (minimum version: 3.3.0) with the calib3d module and the aruco and ccalib contrib modules. These two contrib modules are not included in the official OpenCV releases. A CMake project is already configured ready to be build. Run the following commands: cd ArucoUnityPlugin/build/opencv/ cmake -DCMAKE_INSTALL_PREFIX=install/ -G <generator_name> ../../3rdparty/opencv_contrib/ cmake --build . --config Release If you're not familiar with CMake generators, see this list of generators to set the <generator_name> variable above. For example, use use \"Visual Studio 15 2017 Win64\" with Visual Studio 2017 installed. Alternatively, you can follow the opencv_contrib instructions . Build ArucoUnityPlugin First, make sure Unity is closed during the installation, unless the plugin installation will fail. Configure the building solution of the ArucoUnityPlugin, compile and install it by running the following commands: cd ArucoUnityPlugin/build/ cmake -DCMAKE_INSTALL_PREFIX=.. -DOpenCV_DIR=build/opencv/install/ -DArucoUnity_DIR=../../ArucoUnity/ -G <generator_name> .. cmake --build . --config Release --target INSTALL The installation will copy the plugin into the bin/ and lib/ folders. It will also copy the plugin and the OpenCV libraries to the ArucoUnity/Assets/Plugins/<platform> folder. On Linux the correct path to the -DOpenCV_DIR option above may be set to build/opencv/install/share/OpenCV/ . Export ArucoUnity Open the ArucoUnity/ folder in Unity. No errors should be displayed in the Console panel. A new entry named \"ArucoUnity\" is in the menu bar. Open it and select \"Export package\". Documentation Install the documentation generator DocFX . Run the following commands: cd ArucoUnity/ docfx docfx serve docs/ Open the generated website on http://localhost:8080 ."
  },
  "index.html": {
    "href": "index.html",
    "title": "ArucoUnity documentation | Aruco Unity documentation",
    "keywords": "ArucoUnity documentation Bring augmented reality to Unity by tracking ArUco markers in real time. Standard mono cameras, such as webcams, but also stereo cameras and fisheye lenses are supported. See the README for more details. Left: AR Roll a ball . Right: The markers tracking allows to extend the phone's screen. Usage Download the latest build release , or see the Build section. Import the package in your Unity project. A typical workflow with ArucoUnity is: Create Markers , print and place them in the environment. Calibrate a Camera using a calibration board. Track Markers . Developing Read the ArucoUnity Architecture , Build From Sources and API Documentation pages. To better understand the algorithms used in the OpenCV modules, read these tutorials: Detection of ArUco Markers Calibration with ArUco and ChArUco Camera calibration With OpenCV Omnidirectional Cameara [ sic ] Calibration"
  },
  "manual/track-markers.html": {
    "href": "manual/track-markers.html",
    "title": "Track Markers | Aruco Unity documentation",
    "keywords": "Track Markers First, make sure you have calibrated your camera: read the Calibrate a Camera page. You need to have a calibration file to track some aruco objects. Also, print and place in the environment the aruco objects you want to track. Read the Create Markers page for details. To track your aruco objects: Open the Assets/ArucoUnity/Scenes/TrackMarkers.unity scene. Configure the camera: For a webcam, use the ArucoWebcamCalibrated object already in the scene. Otherwise, drag the prefab corresponding to your camera : Assets/ArucoUnity/Prefabs/Cameras/<CameraType>Calibrated.prefab . Fill CameraParametersFilename with the camera parameters XML file from the calibration of the camera ( Fig.1 ). Fig.1: ArucoWebcamCalibrated configured with camera parameters from a calibration. Create each aruco objects to track: Configure it with what you measure on the printed aruco object. Units are in meters for tracking, not in pixels. Use a ArucoObjectDisplayer to visualize the aruco object, not a ArucoObjectCreator. Simply add any game object as child of the aruco object e.g. the red cube in Fig.2 . Fig.2: ArucoMarker configured to track a physical aruco marker with a 5.4 cm side length. The ArucoObjectDisplayer helps to visualize in the editor the physical object that will be tracked. Configure the tracker ArucoObjectsTracker : Drag all the aruco objects to track in ArucoObjects . Set ArucoCameraDisplay with the camera prefab you use ( Fig.3 ). Fig.3: ArucoObjectsTracker configured to track three objects for the ArucoCameraCalibrated we configured. Run the scene! The ArucoTracker will place (position, rotation, scale) any detected aruco object in the ArucoObjects list relative to the camera ( Fig.4 ). Fig.4: Roll a ball set as child of an aruco board: the game follows the board movements. To understand the algorithm used, read this tutorial: Detection of ArUco Markers ."
  },
  "manual/calibrate-a-camera.html": {
    "href": "manual/calibrate-a-camera.html",
    "title": "Calibrate a Camera | Aruco Unity documentation",
    "keywords": "Calibrate a Camera Motivation In order to be able to track markers you need to calibrate your camera, i.e. measure the camera parameters. The calibration process may seems long but it's only because there is lots of customization options. The principle is straightforward: (1) print a calibration board and (2) take images with your camera of the board in different positions and orientations. ArucoUnity will generate XML file containing the camera parameters. To understand the algorithms used, read these tutorials: Calibration with ArUco and ChArUco and Camera calibration With OpenCV . Calibrate a camera Most of the cameras we use today on our smartphones or laptops are called in ArucoUnity pinhole cameras (camera using a rectilinear lens ) in contrast with cameras using a fisheye lens . So if you want to calibrate your webcam or smartphone, read this section. Make a calibration board. Create a charuco board or a grid board. See the Create Markers page for details. Print the generated image on paper. Stick it on a hard cardboard: the paper must remains as flat as possible during the calibration ( Fig.1 ). Fig.1: Different viewpoints of a charuco calibration board. From OpenCV: https://docs.opencv.org/3.4/da/d13/tutorial_aruco_calibration.html Open the Assets/ArucoUnity/Scenes/CalibrateCamera.unity scene. Configure the ArucoWebcam game object ( Fig.2 ). Set the WebcamId to select the camera you want to use. The first camera's id is 0 . You can list the available webcams with WebCamTexture.devices . MonoArucoCameraDisplay.AutoStart is uncheck because the video stream is displayed by the ArucoCameraCalibrationGUI object. Fig.2: Default configuration of ArucoWebcam using the first webcam (id= 0 ). Configure the calibration board on the PinholeCameraCalibration game object ( Fig.3 ). Set the CalibrationBoard with a charuco board or a grid board. Both are already created in the scene to help you. Configure the calibration board object by measuring the one you just printed : units are in meters this time. The ArucoObjectDisplayer helps you visualize the configured board to see if it's match with the printed one. Don't switch x and y values. Optionally adjust parameters on the PinholeCameraCalibration game object. Set the output camera parameters file with CameraParametersController . The folder is relative to persistentDataPath in builds or to the \"Asset\" folder of your projet in the editor. If the filename is empty, it will be automatically generated from the Aruco camera used. Configure the board detection with DetectorParametersController parameters. They are described on the Detector Parameters section of the ArUco camera calibration tutorial . Configure the calibration flags with PinholeCameraCalibrationFlags . They are described on the calib3d::calibrateCamera() function documentation. Fig.3: PinholeCameraCalibration configured with a charuco board. Run the scene and interact with the UI to calibrate your camera ( Fig.4 ). Hold the calibration board in front of your camera and click on the Add Image button. Think to deactivate the autofocus of your camera: a calibration is done for only one focal length at the time. Take at least 10 images of you calibration board in different positions and orientations without moving the camera between each snapshot. See this example of images . Reset the image list if you want to start over with the Reset button. Calibrate your camera with the image list with the Calibrate button. The reprojection error is displayed to score the calibration precision: it should be close to 0 px. Read the responses of this stackoverflow question to improve your calibrations. Fig.4: Calibration scene running. Calibrate a stereoscopic camera The process is the same as in the Calibrate a camera section but we use differents camera and calibration scripts. Make a calibration board. Open the Assets/ArucoUnity/Scenes/CalibrateCamera.unity scene. Configure the camera: Deactivate the ArucoWebcam game object. Drag Assets/ArucoUnity/Prefabs/Cameras/StereoArucoWebcam.prefab into the scene. Set StereoArucoWebcam.WebcamId1 , StereoArucoWebcam.WebcamId2 and uncheck StereoArucoCameraDisplay.AutoStart ( Fig.5 ). Fig.5: Stereo webcam configured to use the first (id1= 0 ) and the second webcam (id2= 1 ) Configure the calibration: Deactivate the PinholeCameraCalibration game object. Drag Assets/ArucoUnity/Prefabs/Calibration/StereoPinholeCameraCalibration.prefab into the scene. Set StereoPinholeCameraCalibration.ArucoCamera with StereoArucoWebcam ( Fig.6 ). Set ArucoCameraCalibrationGUI.ArucoCameraCalibration with StereoPinholeCameraCalibration ( Fig.7 ). Optionally adjust detection and calibration parameters. Fig.6: StereoPinholeCameraCalibration configured with a charuco board. Fig.7: ArucoCameraCalibrationGUI configured with StereoPinholeCameraCalibration . Run the scene and calibration your camera ( Fig.8 ). Fig.8: Calibration scene running. Calibrate a fisheye camera Follow the Calibrate a stereoscopic camera section but use OmnidirCameraCalibration prefab for a monoscopic camera or StereoOmnidirCameraCalibration prefab for a stereoscopic camera ( Fig.9 ). Fig.9: Calibration scene running for a stereoscopic fisheye camera. The algorithms used are described in this tutorial: Omnidirectional Cameara [ sic ] Calibration . Reuse calibration data You may already have calibrated your camera and want to directly reuse your calibration data. ArucoUnity doesn't use the YAML format used by OpenCV to store these data but use XML files. Therefore you need to create by hand calibration file for ArucoUnity. Make a copy of Assets/ArucoUnity/CameraParameters/<CameraType>Example.xml and transfer your calibration data."
  },
  "manual/aruco-unity-architecture.html": {
    "href": "manual/aruco-unity-architecture.html",
    "title": "ArucoUnity Architecture | Aruco Unity documentation",
    "keywords": "ArucoUnity Architecture ArucoUnity is made of three parts: A plugin that wraps into a C interface the aruco, calib3d and ccalib modules of OpenCV. A C# interface ( ArucoUnity.Plugin namespace ) using the plugin to reproduce the OpenCV modules classes and functions. Unity scripts to calibrate cameras and to track markers directly in the editor with good performances. You can code directly with the OpenCV C# equivalent interface but we advise you to work with and extend the Unity scripts. The Unity scripts were originally one camera display and tracking script and one calibration script. For performances and to support multiple types of camera (fisheye, stereoscopic) we decoupled these scripts ( Fig.1 ). Fig.1: Overview class diagram of the Unity scripts."
  }
}